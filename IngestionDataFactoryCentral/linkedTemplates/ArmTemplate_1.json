{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "IngestionDataFactoryCentral"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/VitalsSinkParquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PilotBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "vitals",
						"container": "destinationlz"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CODE_SET",
						"type": "INT32"
					},
					{
						"name": "DISPLAY",
						"type": "UTF8"
					},
					{
						"name": "DISPLAY_KEY",
						"type": "UTF8"
					},
					{
						"name": "DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "DEFINITION",
						"type": "UTF8"
					},
					{
						"name": "TABLE_NAME",
						"type": "UTF8"
					},
					{
						"name": "CONTRIBUTOR",
						"type": "UTF8"
					},
					{
						"name": "OWNER_MODULE",
						"type": "UTF8"
					},
					{
						"name": "CACHE_IND",
						"type": "BOOLEAN"
					},
					{
						"name": "EXTENSION_IND",
						"type": "INT32"
					},
					{
						"name": "ADD_ACCESS_IND",
						"type": "BOOLEAN"
					},
					{
						"name": "CHG_ACCESS_IND",
						"type": "BOOLEAN"
					},
					{
						"name": "DEL_ACCESS_IND",
						"type": "BOOLEAN"
					},
					{
						"name": "INQ_ACCESS_IND",
						"type": "BOOLEAN"
					},
					{
						"name": "DOMAIN_QUALIFIER_IND",
						"type": "BOOLEAN"
					},
					{
						"name": "DOMAIN_CODE_SET",
						"type": "INT32"
					},
					{
						"name": "UPDT_ID",
						"type": "INT32"
					},
					{
						"name": "UPDT_CNT",
						"type": "INT32"
					},
					{
						"name": "UPDT_TASK",
						"type": "INT32"
					},
					{
						"name": "UPDT_APPLCTX",
						"type": "INT64"
					},
					{
						"name": "CODE_SET_HITS",
						"type": "INT32"
					},
					{
						"name": "CODE_VALUES_CNT",
						"type": "INT32"
					},
					{
						"name": "DEF_DUP_RULE_FLAG",
						"type": "INT32"
					},
					{
						"name": "CDF_MEANING_DUP_IND",
						"type": "BOOLEAN"
					},
					{
						"name": "DISPLAY_KEY_DUP_IND",
						"type": "BOOLEAN"
					},
					{
						"name": "ACTIVE_IND_DUP_IND",
						"type": "BOOLEAN"
					},
					{
						"name": "DISPLAY_DUP_IND",
						"type": "BOOLEAN"
					},
					{
						"name": "ALIAS_DUP_IND",
						"type": "BOOLEAN"
					},
					{
						"name": "DEFINITION_DUP_IND",
						"type": "BOOLEAN"
					},
					{
						"name": "LAST_UTC_TS",
						"type": "INT96"
					},
					{
						"name": "TXN_ID_TEXT",
						"type": "UTF8"
					},
					{
						"name": "UPDT_DT_TM",
						"type": "INT96"
					},
					{
						"name": "INST_ID",
						"type": "INT32"
					},
					{
						"name": "DW_Refresh_DT_TM",
						"type": "INT96"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestVitalsSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "PilotBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "vitals",
						"container": "destinationlz"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CLINICAL_EVENT_ID",
						"type": "DOUBLE"
					},
					{
						"name": "Cerner_Encounter_ID",
						"type": "DOUBLE"
					},
					{
						"name": "Cerner_Patient_ID",
						"type": "DOUBLE"
					},
					{
						"name": "Cerner_ENCNTR_FINANCIAL_ID",
						"type": "DOUBLE"
					},
					{
						"name": "EVENT_ID",
						"type": "DOUBLE"
					},
					{
						"name": "EVENT_TITLE_TEXT",
						"type": "UTF8"
					},
					{
						"name": "VIEW_LEVEL",
						"type": "DOUBLE"
					},
					{
						"name": "ORDER_ID",
						"type": "DOUBLE"
					},
					{
						"name": "CATALOG_CD",
						"type": "DOUBLE"
					},
					{
						"name": "ACCESSION_NBR",
						"type": "UTF8"
					},
					{
						"name": "CONTRIBUTOR_SYSTEM_CD",
						"type": "DOUBLE"
					},
					{
						"name": "PARENT_EVENT_ID",
						"type": "DOUBLE"
					},
					{
						"name": "EVENT_RELTN_CD",
						"type": "DOUBLE"
					},
					{
						"name": "EVENT_CLASS_CD",
						"type": "DOUBLE"
					},
					{
						"name": "EVENT_CD",
						"type": "DOUBLE"
					},
					{
						"name": "EVENT_TAG",
						"type": "UTF8"
					},
					{
						"name": "EVENT_END_DT_TM_OS",
						"type": "DOUBLE"
					},
					{
						"name": "RESULT_VAL",
						"type": "UTF8"
					},
					{
						"name": "RESULT_UNITS_CD",
						"type": "DOUBLE"
					},
					{
						"name": "RESULT_TIME_UNITS_CD",
						"type": "DOUBLE"
					},
					{
						"name": "TASK_ASSAY_CD",
						"type": "DOUBLE"
					},
					{
						"name": "RECORD_STATUS_CD",
						"type": "DOUBLE"
					},
					{
						"name": "RESULT_STATUS_CD",
						"type": "DOUBLE"
					},
					{
						"name": "AUTHENTIC_FLAG",
						"type": "DOUBLE"
					},
					{
						"name": "PUBLISH_FLAG",
						"type": "DOUBLE"
					},
					{
						"name": "QC_REVIEW_CD",
						"type": "DOUBLE"
					},
					{
						"name": "NORMALCY_CD",
						"type": "DOUBLE"
					},
					{
						"name": "NORMALCY_METHOD_CD",
						"type": "DOUBLE"
					},
					{
						"name": "RESOURCE_GROUP_CD",
						"type": "DOUBLE"
					},
					{
						"name": "RESOURCE_CD",
						"type": "DOUBLE"
					},
					{
						"name": "SUBTABLE_BIT_MAP",
						"type": "DOUBLE"
					},
					{
						"name": "COLLATING_SEQ",
						"type": "UTF8"
					},
					{
						"name": "VERIFIED_PRSNL_ID",
						"type": "DOUBLE"
					},
					{
						"name": "PERFORMED_PRSNL_ID",
						"type": "DOUBLE"
					},
					{
						"name": "ce_UPDT_ID",
						"type": "DOUBLE"
					},
					{
						"name": "ce_UPDT_TASK",
						"type": "DOUBLE"
					},
					{
						"name": "ce_UPDT_CNT",
						"type": "DOUBLE"
					},
					{
						"name": "ce_UPDT_APPLCTX",
						"type": "DOUBLE"
					},
					{
						"name": "NORMAL_LOW",
						"type": "UTF8"
					},
					{
						"name": "NORMAL_HIGH",
						"type": "UTF8"
					},
					{
						"name": "CRITICAL_LOW",
						"type": "UTF8"
					},
					{
						"name": "CRITICAL_HIGH",
						"type": "UTF8"
					},
					{
						"name": "EVENT_TAG_SET_FLAG",
						"type": "DOUBLE"
					},
					{
						"name": "NOTE_IMPORTANCE_BIT_MAP",
						"type": "DOUBLE"
					},
					{
						"name": "ORDER_ACTION_SEQUENCE",
						"type": "DOUBLE"
					},
					{
						"name": "ENTRY_MODE_CD",
						"type": "DOUBLE"
					},
					{
						"name": "SOURCE_CD",
						"type": "DOUBLE"
					},
					{
						"name": "CLINICAL_SEQ",
						"type": "UTF8"
					},
					{
						"name": "EVENT_END_TZ",
						"type": "DOUBLE"
					},
					{
						"name": "EVENT_START_TZ",
						"type": "DOUBLE"
					},
					{
						"name": "PERFORMED_TZ",
						"type": "DOUBLE"
					},
					{
						"name": "VERIFIED_TZ",
						"type": "DOUBLE"
					},
					{
						"name": "TASK_ASSAY_VERSION_NBR",
						"type": "DOUBLE"
					},
					{
						"name": "MODIFIER_LONG_TEXT_ID",
						"type": "DOUBLE"
					},
					{
						"name": "SRC_EVENT_ID",
						"type": "DOUBLE"
					},
					{
						"name": "CE_DYNAMIC_LABEL_ID",
						"type": "DOUBLE"
					},
					{
						"name": "NOMEN_STRING_FLAG",
						"type": "DOUBLE"
					},
					{
						"name": "ce_LAST_UTC_TS",
						"type": "INT96"
					},
					{
						"name": "DEVICE_FREE_TXT",
						"type": "UTF8"
					},
					{
						"name": "TRAIT_BIT_MAP",
						"type": "DOUBLE"
					},
					{
						"name": "VALID_UNTIL_DT_TM",
						"type": "INT96"
					},
					{
						"name": "VERIFIED_DT_TM",
						"type": "INT96"
					},
					{
						"name": "VALID_FROM_DT_TM",
						"type": "INT96"
					},
					{
						"name": "ce_UPDT_DT_TM",
						"type": "INT96"
					},
					{
						"name": "SRC_CLINSIG_UPDT_DT_TM",
						"type": "INT96"
					},
					{
						"name": "PERFORMED_DT_TM",
						"type": "INT96"
					},
					{
						"name": "EXPIRATION_DT_TM",
						"type": "INT96"
					},
					{
						"name": "EVENT_START_DT_TM",
						"type": "INT96"
					},
					{
						"name": "EVENT_END_DT_TM",
						"type": "INT96"
					},
					{
						"name": "CLINSIG_UPDT_DT_TM",
						"type": "INT96"
					},
					{
						"name": "UPDATE_PERSONNEL",
						"type": "UTF8"
					},
					{
						"name": "VERIFIED_PERSONNEL",
						"type": "UTF8"
					},
					{
						"name": "PERFORMING_PERSONNEL",
						"type": "UTF8"
					},
					{
						"name": "DISPLAY_EVENT",
						"type": "UTF8"
					},
					{
						"name": "CODE_VALUE",
						"type": "INT64"
					},
					{
						"name": "DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "RESULT_UNIT_DISPLAY",
						"type": "UTF8"
					},
					{
						"name": "RESULT_TIME_UNIT_DISPLAY",
						"type": "UTF8"
					},
					{
						"name": "RESULT_STATUS_DISPLAY",
						"type": "UTF8"
					},
					{
						"name": "CONTRIBUTOR_SYSTEM_DISPLAY",
						"type": "UTF8"
					},
					{
						"name": "ENTRY_MODE_DISPLAY",
						"type": "UTF8"
					},
					{
						"name": "RESULT_SOURCE_DISPLAY",
						"type": "UTF8"
					},
					{
						"name": "NORMALCY_DISPLAY",
						"type": "UTF8"
					},
					{
						"name": "NORMALCY_METHOD_DISPLAY",
						"type": "UTF8"
					},
					{
						"name": "EVENT_RELATIONSHIP_DISPLAY",
						"type": "UTF8"
					},
					{
						"name": "RECORD_STATUS_DISPLAY",
						"type": "UTF8"
					},
					{
						"name": "RESOURCE_GROUP_DISPLAY",
						"type": "UTF8"
					},
					{
						"name": "RESOURCE_DISPLAY",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_Millennium')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_clinicalevent",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "V500.CLINICAL_EVENT"
							},
							{
								"name": "Destination",
								"value": "staginglz/V500_CLINICAL_EVENT/onemillionrecords"
							}
						],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"partitionOption": "DynamicRange",
								"partitionSettings": {
									"partitionColumnName": "CLINICAL_EVENT_ID",
									"partitionUpperBound": "4999999999",
									"partitionLowerBound": "4900000000"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"maxConcurrentConnections": 16
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"redirectIncompatibleRowSettings": {
								"linkedServiceName": {
									"referenceName": "PilotBlobStorage",
									"type": "LinkedServiceReference"
								},
								"path": "staginglz/V500_CLINICAL_EVENT"
							}
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_clinicalevent",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_clinicalevent",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyPipeline_ODBC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_charge_event",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "\"V500\".\"CLINICAL_EVENT\""
							},
							{
								"name": "Destination",
								"value": "staginglz//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "OdbcSource"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"maxConcurrentConnections": 16
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"redirectIncompatibleRowSettings": {
								"linkedServiceName": {
									"referenceName": "PilotBlobStorage",
									"type": "LinkedServiceReference"
								},
								"path": "staginglz/V500_CLINICAL_EVENT"
							}
						},
						"inputs": [
							{
								"referenceName": "Source_ODBC_Charge_Event",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Destination_parquet_charge_event",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParallelDataStagingIncremental_Oracle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListofSourceTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM dbo.[tablesToStage] WHERE UPPER(sourceDB) = 'ORACLE' and incrementalCopyFlag = 1"
							},
							"dataset": {
								"referenceName": "SourceTableList",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ParallelDataCopy",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListofSourceTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListofSourceTables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LogExecutionStart",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[logExecutionStart]",
										"storedProcedureParameters": {
											"pipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineRunStartTime": {
												"value": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"stageTableID": {
												"value": {
													"value": "@item().stageTableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "PilotAzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Stage Data",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LogExecutionStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@{item().srcQuery}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"maxConcurrentConnections": 16
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ParallelDataStagingOracle",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "StagingData",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@{replace(item().schemaName, ' ','')}_@{replace(item().tableName, ' ','')}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SuccessSP",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Stage Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[logExecutionEnd]",
										"storedProcedureParameters": {
											"pipelineRunEndTime": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"pipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineRunStatus": {
												"value": "Success",
												"type": "String"
											},
											"stageTableID": {
												"value": {
													"value": "@{item().stageTableID}",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "PilotAzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Failure SP",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Stage Data",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[logExecutionEnd]",
										"storedProcedureParameters": {
											"pipelineRunEndTime": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"pipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineRunStatus": {
												"value": "Failure",
												"type": "String"
											},
											"stageTableID": {
												"value": {
													"value": "@{item().stageTableID}",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "PilotAzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParallelDataStaging_MSSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListofSourceTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM dbo.[tablesToStage] WHERE sourceDB = 'MSSQL'"
							},
							"dataset": {
								"referenceName": "SourceTableList",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ParallelDataCopy",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListofSourceTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListofSourceTables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LogExecutionStart",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[logExecutionStart]",
										"storedProcedureParameters": {
											"pipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineRunStartTime": {
												"value": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"stageTableID": {
												"value": {
													"value": "@item().stageTableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "PilotAzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Stage Data",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LogExecutionStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@item().srcQuery",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "PlaceholderSourceTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "StagingData",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@{replace(item().schemaName, ' ','')}_@{replace(item().tableName, ' ','')}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SuccessSP",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Stage Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[logExecutionEnd]",
										"storedProcedureParameters": {
											"pipelineRunEndTime": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"pipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineRunStatus": {
												"value": "Success",
												"type": "String"
											},
											"stageTableID": {
												"value": {
													"value": "@{item().stageTableID}",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "PilotAzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Failure SP",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Stage Data",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[logExecutionEnd]",
										"storedProcedureParameters": {
											"pipelineRunEndTime": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"pipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineRunStatus": {
												"value": "Failure",
												"type": "String"
											},
											"stageTableID": {
												"value": {
													"value": "@{item().stageTableID}",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "PilotAzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParallelDataStaging_Oracle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ListofSourceTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM dbo.[tablesToStage] WHERE UPPER(sourceDB) = 'ORACLE' and incrementalCopyFlag = 0"
							},
							"dataset": {
								"referenceName": "SourceTableList",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ParallelDataCopy",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListofSourceTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListofSourceTables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LogExecutionStart",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[logExecutionStart]",
										"storedProcedureParameters": {
											"pipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineRunStartTime": {
												"value": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"stageTableID": {
												"value": {
													"value": "@item().stageTableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "PilotAzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Stage Data",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LogExecutionStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@{item().srcQuery}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ParallelDataStagingOracle",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "StagingData",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@{replace(item().schemaName, ' ','')}_@{replace(item().tableName, ' ','')}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SuccessSP",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Stage Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[logExecutionEnd]",
										"storedProcedureParameters": {
											"pipelineRunEndTime": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"pipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineRunStatus": {
												"value": "Success",
												"type": "String"
											},
											"stageTableID": {
												"value": {
													"value": "@{item().stageTableID}",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "PilotAzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Failure SP",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Stage Data",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[logExecutionEnd]",
										"storedProcedureParameters": {
											"pipelineRunEndTime": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"pipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineRunStatus": {
												"value": "Failure",
												"type": "String"
											},
											"stageTableID": {
												"value": {
													"value": "@{item().stageTableID}",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "PilotAzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/VitalsQuery')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Query to combine tables into the Vitals dataset\n",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "StagedClinicalEvent",
								"type": "DatasetReference"
							},
							"name": "clinicalevent",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedPrsnl",
								"type": "DatasetReference"
							},
							"name": "updatePrsnl",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedPrsnl",
								"type": "DatasetReference"
							},
							"name": "verifiedPrsnl",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedPrsnl",
								"type": "DatasetReference"
							},
							"name": "performingPrsnl",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "eventClass",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "eventClassDesc",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "resultUnit",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "resultTimeUnit",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "resultStatus",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "contributorSystem",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "entryMode",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "resultSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "normalcy",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "normalcyMethod",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "eventRelationship",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "recordStatus",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "resourceGroup",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "resource",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VitalsSinkParquet",
								"type": "DatasetReference"
							},
							"name": "VitalsSink"
						}
					],
					"transformations": [
						{
							"name": "cePrsnlUpdatePersonnel"
						},
						{
							"name": "cePrsnlPerformingPersonnel"
						},
						{
							"name": "ceEventCode"
						},
						{
							"name": "eventClassFilter"
						},
						{
							"name": "eventClassDescFilter"
						},
						{
							"name": "SelectEventClassDesc"
						},
						{
							"name": "ceEventClassDesc"
						},
						{
							"name": "MainSelect"
						},
						{
							"name": "SelectEventClass"
						},
						{
							"name": "SelectVerifiedPrsnl"
						},
						{
							"name": "SelectUpdatePrsnl"
						},
						{
							"name": "SelectPerformingPrsnl"
						},
						{
							"name": "cePrsnlVerifiedPersonnel"
						},
						{
							"name": "resultUnitFilter"
						},
						{
							"name": "SelectResultUnit"
						},
						{
							"name": "ceResultUnit"
						},
						{
							"name": "resultTimeUnitFilter"
						},
						{
							"name": "SelectResultTimeUnit"
						},
						{
							"name": "ceResultTimeUnit"
						},
						{
							"name": "resultStatusFilter"
						},
						{
							"name": "SelectResultStatus"
						},
						{
							"name": "ceResultStatus"
						},
						{
							"name": "contributorSystemFilter"
						},
						{
							"name": "SelectContributorSystem"
						},
						{
							"name": "ceContributorSystem"
						},
						{
							"name": "entryModeFilter"
						},
						{
							"name": "SelectEntryMode"
						},
						{
							"name": "ceEntryMode"
						},
						{
							"name": "resultSourceFilter"
						},
						{
							"name": "SelectResultSource"
						},
						{
							"name": "ceResultSource"
						},
						{
							"name": "normalcyFilter"
						},
						{
							"name": "SelectNormalcy"
						},
						{
							"name": "ceNormalcy"
						},
						{
							"name": "normalcyMethodFilter"
						},
						{
							"name": "SelectNormalcyMethod"
						},
						{
							"name": "ceNormalcyMethod"
						},
						{
							"name": "eventRelationshipFilter"
						},
						{
							"name": "SelectEventRelationship"
						},
						{
							"name": "ceEventRelationship"
						},
						{
							"name": "recordStatusFilter"
						},
						{
							"name": "SelectRecordStatus"
						},
						{
							"name": "ceRecordStatus"
						},
						{
							"name": "resourceGroupFilter"
						},
						{
							"name": "SelectResourceGroup"
						},
						{
							"name": "ceResourceGroup"
						},
						{
							"name": "resourceFilter"
						},
						{
							"name": "SelectResource"
						},
						{
							"name": "ceResource"
						}
					],
					"script": "\n\nsource(output(\n\t\tCLINICAL_EVENT_ID as double,\n\t\tENCNTR_ID as double,\n\t\tPERSON_ID as double,\n\t\tUTC_TMP2_4 as timestamp,\n\t\tENCNTR_FINANCIAL_ID as double,\n\t\tEVENT_ID as double,\n\t\tUTC_TMP2_7 as timestamp,\n\t\tEVENT_TITLE_TEXT as string,\n\t\tVIEW_LEVEL as double,\n\t\tORDER_ID as double,\n\t\tCATALOG_CD as double,\n\t\tSERIES_REF_NBR as string,\n\t\tACCESSION_NBR as string,\n\t\tCONTRIBUTOR_SYSTEM_CD as double,\n\t\tREFERENCE_NBR as string,\n\t\tPARENT_EVENT_ID as double,\n\t\tEVENT_RELTN_CD as double,\n\t\tUTC_TMP2_18 as timestamp,\n\t\tEVENT_CLASS_CD as double,\n\t\tEVENT_CD as double,\n\t\tEVENT_TAG as string,\n\t\tUTC_TMP2_22 as timestamp,\n\t\tEVENT_END_DT_TM_OS as double,\n\t\tRESULT_VAL as string,\n\t\tRESULT_UNITS_CD as double,\n\t\tRESULT_TIME_UNITS_CD as double,\n\t\tTASK_ASSAY_CD as double,\n\t\tRECORD_STATUS_CD as double,\n\t\tRESULT_STATUS_CD as double,\n\t\tAUTHENTIC_FLAG as double,\n\t\tPUBLISH_FLAG as double,\n\t\tQC_REVIEW_CD as double,\n\t\tNORMALCY_CD as double,\n\t\tNORMALCY_METHOD_CD as double,\n\t\tINQUIRE_SECURITY_CD as double,\n\t\tRESOURCE_GROUP_CD as double,\n\t\tRESOURCE_CD as double,\n\t\tSUBTABLE_BIT_MAP as double,\n\t\tCOLLATING_SEQ as string,\n\t\tUTC_TMP2_40 as timestamp,\n\t\tVERIFIED_PRSNL_ID as double,\n\t\tUTC_TMP2_42 as timestamp,\n\t\tPERFORMED_PRSNL_ID as double,\n\t\tUTC_TMP2_44 as timestamp,\n\t\tUPDT_ID as double,\n\t\tUPDT_TASK as double,\n\t\tUPDT_CNT as double,\n\t\tUPDT_APPLCTX as double,\n\t\tNORMAL_LOW as string,\n\t\tNORMAL_HIGH as string,\n\t\tCRITICAL_LOW as string,\n\t\tCRITICAL_HIGH as string,\n\t\tUTC_TMP2_53 as timestamp,\n\t\tEVENT_TAG_SET_FLAG as double,\n\t\tNOTE_IMPORTANCE_BIT_MAP as double,\n\t\tUTC_TMP2_56 as timestamp,\n\t\tORDER_ACTION_SEQUENCE as double,\n\t\tENTRY_MODE_CD as double,\n\t\tSOURCE_CD as double,\n\t\tCLINICAL_SEQ as string,\n\t\tEVENT_END_TZ as double,\n\t\tEVENT_START_TZ as double,\n\t\tPERFORMED_TZ as double,\n\t\tVERIFIED_TZ as double,\n\t\tTASK_ASSAY_VERSION_NBR as double,\n\t\tMODIFIER_LONG_TEXT_ID as double,\n\t\tSRC_EVENT_ID as double,\n\t\tUTC_TMP2_68 as timestamp,\n\t\tCE_DYNAMIC_LABEL_ID as double,\n\t\tNOMEN_STRING_FLAG as double,\n\t\tLAST_UTC_TS as timestamp,\n\t\tDEVICE_FREE_TXT as string,\n\t\tTRAIT_BIT_MAP as double,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as double,\n\t\tVALID_UNTIL_DT_TM as timestamp,\n\t\tVERIFIED_DT_TM as timestamp,\n\t\tVALID_FROM_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tSRC_CLINSIG_UPDT_DT_TM as timestamp,\n\t\tPERFORMED_DT_TM as timestamp,\n\t\tEXPIRATION_DT_TM as timestamp,\n\t\tEVENT_START_DT_TM as timestamp,\n\t\tEVENT_END_DT_TM as timestamp,\n\t\tCLINSIG_UPDT_DT_TM as timestamp,\n\t\tINST_ID as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> clinicalevent\nsource(output(\n\t\tPERSON_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_ID as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tACTIVE_IND as boolean,\n\t\tACTIVE_STATUS_CD as long,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCREATE_PRSNL_ID as integer,\n\t\tNAME_LAST_KEY as string,\n\t\tNAME_FIRST_KEY as string,\n\t\tPRSNL_TYPE_CD as long,\n\t\tNAME_FULL_FORMATTED as string,\n\t\tPASSWORD as string,\n\t\tEMAIL as string,\n\t\tPHYSICIAN_IND as boolean,\n\t\tPOSITION_CD as long,\n\t\tDEPARTMENT_CD as long,\n\t\tFREE_TEXT_IND as boolean,\n\t\tSECTION_CD as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tCONTRIBUTOR_SYSTEM_CD as long,\n\t\tNAME_LAST as string,\n\t\tNAME_FIRST as string,\n\t\tUSERNAME as string,\n\t\tFT_ENTITY_NAME as string,\n\t\tFT_ENTITY_ID as integer,\n\t\tPRIM_ASSIGN_LOC_CD as long,\n\t\tLOG_ACCESS_IND as boolean,\n\t\tLOG_LEVEL as integer,\n\t\tNAME_FIRST_KEY_NLS as string,\n\t\tNAME_LAST_KEY_NLS as string,\n\t\tPHYSICIAN_STATUS_CD as long,\n\t\tLOGICAL_DOMAIN_ID as integer,\n\t\tLOGICAL_DOMAIN_GRP_ID as integer,\n\t\tNAME_FIRST_KEY_A_NLS as string,\n\t\tNAME_LAST_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tEXTERNAL_IND as boolean,\n\t\tTXN_ID_TEXT as string,\n\t\tACTIVE_STATUS_DT_TM as timestamp,\n\t\tBEG_EFFECTIVE_DT_TM as timestamp,\n\t\tCREATE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 100,\n\tinferDriftedColumnTypes: true) ~> updatePrsnl\nsource(output(\n\t\tPERSON_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_ID as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tACTIVE_IND as boolean,\n\t\tACTIVE_STATUS_CD as long,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCREATE_PRSNL_ID as integer,\n\t\tNAME_LAST_KEY as string,\n\t\tNAME_FIRST_KEY as string,\n\t\tPRSNL_TYPE_CD as long,\n\t\tNAME_FULL_FORMATTED as string,\n\t\tPASSWORD as string,\n\t\tEMAIL as string,\n\t\tPHYSICIAN_IND as boolean,\n\t\tPOSITION_CD as long,\n\t\tDEPARTMENT_CD as long,\n\t\tFREE_TEXT_IND as boolean,\n\t\tSECTION_CD as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tCONTRIBUTOR_SYSTEM_CD as long,\n\t\tNAME_LAST as string,\n\t\tNAME_FIRST as string,\n\t\tUSERNAME as string,\n\t\tFT_ENTITY_NAME as string,\n\t\tFT_ENTITY_ID as integer,\n\t\tPRIM_ASSIGN_LOC_CD as long,\n\t\tLOG_ACCESS_IND as boolean,\n\t\tLOG_LEVEL as integer,\n\t\tNAME_FIRST_KEY_NLS as string,\n\t\tNAME_LAST_KEY_NLS as string,\n\t\tPHYSICIAN_STATUS_CD as long,\n\t\tLOGICAL_DOMAIN_ID as integer,\n\t\tLOGICAL_DOMAIN_GRP_ID as integer,\n\t\tNAME_FIRST_KEY_A_NLS as string,\n\t\tNAME_LAST_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tEXTERNAL_IND as boolean,\n\t\tTXN_ID_TEXT as string,\n\t\tACTIVE_STATUS_DT_TM as timestamp,\n\t\tBEG_EFFECTIVE_DT_TM as timestamp,\n\t\tCREATE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> verifiedPrsnl\nsource(output(\n\t\tPERSON_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_ID as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tACTIVE_IND as boolean,\n\t\tACTIVE_STATUS_CD as long,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCREATE_PRSNL_ID as integer,\n\t\tNAME_LAST_KEY as string,\n\t\tNAME_FIRST_KEY as string,\n\t\tPRSNL_TYPE_CD as long,\n\t\tNAME_FULL_FORMATTED as string,\n\t\tPASSWORD as string,\n\t\tEMAIL as string,\n\t\tPHYSICIAN_IND as boolean,\n\t\tPOSITION_CD as long,\n\t\tDEPARTMENT_CD as long,\n\t\tFREE_TEXT_IND as boolean,\n\t\tSECTION_CD as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tCONTRIBUTOR_SYSTEM_CD as long,\n\t\tNAME_LAST as string,\n\t\tNAME_FIRST as string,\n\t\tUSERNAME as string,\n\t\tFT_ENTITY_NAME as string,\n\t\tFT_ENTITY_ID as integer,\n\t\tPRIM_ASSIGN_LOC_CD as long,\n\t\tLOG_ACCESS_IND as boolean,\n\t\tLOG_LEVEL as integer,\n\t\tNAME_FIRST_KEY_NLS as string,\n\t\tNAME_LAST_KEY_NLS as string,\n\t\tPHYSICIAN_STATUS_CD as long,\n\t\tLOGICAL_DOMAIN_ID as integer,\n\t\tLOGICAL_DOMAIN_GRP_ID as integer,\n\t\tNAME_FIRST_KEY_A_NLS as string,\n\t\tNAME_LAST_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tEXTERNAL_IND as boolean,\n\t\tTXN_ID_TEXT as string,\n\t\tACTIVE_STATUS_DT_TM as timestamp,\n\t\tBEG_EFFECTIVE_DT_TM as timestamp,\n\t\tCREATE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> performingPrsnl\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> eventClass\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> eventClassDesc\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> resultUnit\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> resultTimeUnit\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> resultStatus\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> contributorSystem\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> entryMode\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> resultSource\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> normalcy\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> normalcyMethod\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> eventRelationship\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> recordStatus\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> resourceGroup\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> resource\nclinicalevent, SelectUpdatePrsnl join(UPDT_ID == UPDATE_PERSON_ID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> cePrsnlUpdatePersonnel\ncePrsnlUpdatePersonnel, SelectPerformingPrsnl join(PERFORMED_PRSNL_ID == PERFORMING_PERSON_ID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> cePrsnlPerformingPersonnel\ncePrsnlVerifiedPersonnel, SelectEventClass join(EVENT_CD == CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceEventCode\neventClass filter(CODE_SET == 72 && ACTIVE_IND) ~> eventClassFilter\neventClassDesc filter(CODE_SET == 53 && ACTIVE_IND) ~> eventClassDescFilter\neventClassDescFilter select(mapColumn(\n\t\tCODE_VALUE,\n\t\tDESCRIPTION\n\t)) ~> SelectEventClassDesc\nceEventCode, SelectEventClassDesc join(EVENT_CLASS_CD == SelectEventClassDesc@CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceEventClassDesc\nceResource select(mapColumn(\n\t\tCLINICAL_EVENT_ID,\n\t\tCerner_Encounter_ID = ENCNTR_ID,\n\t\tCerner_Patient_ID = PERSON_ID,\n\t\tCerner_ENCNTR_FINANCIAL_ID = ENCNTR_FINANCIAL_ID,\n\t\tEVENT_ID,\n\t\tEVENT_TITLE_TEXT,\n\t\tVIEW_LEVEL,\n\t\tORDER_ID,\n\t\tCATALOG_CD,\n\t\tACCESSION_NBR,\n\t\tCONTRIBUTOR_SYSTEM_CD,\n\t\tPARENT_EVENT_ID,\n\t\tEVENT_RELTN_CD,\n\t\tEVENT_CLASS_CD,\n\t\tEVENT_CD,\n\t\tEVENT_TAG,\n\t\tEVENT_END_DT_TM_OS,\n\t\tRESULT_VAL,\n\t\tRESULT_UNITS_CD,\n\t\tRESULT_TIME_UNITS_CD,\n\t\tTASK_ASSAY_CD,\n\t\tRECORD_STATUS_CD,\n\t\tRESULT_STATUS_CD,\n\t\tAUTHENTIC_FLAG,\n\t\tPUBLISH_FLAG,\n\t\tQC_REVIEW_CD,\n\t\tNORMALCY_CD,\n\t\tNORMALCY_METHOD_CD,\n\t\tRESOURCE_GROUP_CD,\n\t\tRESOURCE_CD,\n\t\tSUBTABLE_BIT_MAP,\n\t\tCOLLATING_SEQ,\n\t\tVERIFIED_PRSNL_ID,\n\t\tPERFORMED_PRSNL_ID,\n\t\tce_UPDT_ID = UPDT_ID,\n\t\tce_UPDT_TASK = UPDT_TASK,\n\t\tce_UPDT_CNT = UPDT_CNT,\n\t\tce_UPDT_APPLCTX = UPDT_APPLCTX,\n\t\tNORMAL_LOW,\n\t\tNORMAL_HIGH,\n\t\tCRITICAL_LOW,\n\t\tCRITICAL_HIGH,\n\t\tEVENT_TAG_SET_FLAG,\n\t\tNOTE_IMPORTANCE_BIT_MAP,\n\t\tORDER_ACTION_SEQUENCE,\n\t\tENTRY_MODE_CD,\n\t\tSOURCE_CD,\n\t\tCLINICAL_SEQ,\n\t\tEVENT_END_TZ,\n\t\tEVENT_START_TZ,\n\t\tPERFORMED_TZ,\n\t\tVERIFIED_TZ,\n\t\tTASK_ASSAY_VERSION_NBR,\n\t\tMODIFIER_LONG_TEXT_ID,\n\t\tSRC_EVENT_ID,\n\t\tCE_DYNAMIC_LABEL_ID,\n\t\tNOMEN_STRING_FLAG,\n\t\tce_LAST_UTC_TS = LAST_UTC_TS,\n\t\tDEVICE_FREE_TXT,\n\t\tTRAIT_BIT_MAP,\n\t\tVALID_UNTIL_DT_TM,\n\t\tVERIFIED_DT_TM,\n\t\tVALID_FROM_DT_TM,\n\t\tce_UPDT_DT_TM = UPDT_DT_TM,\n\t\tSRC_CLINSIG_UPDT_DT_TM,\n\t\tPERFORMED_DT_TM,\n\t\tEXPIRATION_DT_TM,\n\t\tEVENT_START_DT_TM,\n\t\tEVENT_END_DT_TM,\n\t\tCLINSIG_UPDT_DT_TM,\n\t\tUPDATE_PERSONNEL,\n\t\tVERIFIED_PERSONNEL,\n\t\tPERFORMING_PERSONNEL,\n\t\tDISPLAY_EVENT = DISPLAY,\n\t\tCODE_VALUE = SelectEventClassDesc@CODE_VALUE,\n\t\tDESCRIPTION = SelectEventClassDesc@DESCRIPTION,\n\t\tRESULT_UNIT_DISPLAY,\n\t\tRESULT_TIME_UNIT_DISPLAY,\n\t\tRESULT_STATUS_DISPLAY,\n\t\tCONTRIBUTOR_SYSTEM_DISPLAY,\n\t\tENTRY_MODE_DISPLAY = EVENT_ENTRY_MODE_DISPLAY,\n\t\tRESULT_SOURCE_DISPLAY,\n\t\tNORMALCY_DISPLAY,\n\t\tNORMALCY_METHOD_DISPLAY,\n\t\tEVENT_RELATIONSHIP_DISPLAY,\n\t\tRECORD_STATUS_DISPLAY,\n\t\tRESOURCE_GROUP_DISPLAY,\n\t\tRESOURCE_DISPLAY\n\t)) ~> MainSelect\neventClassFilter select(mapColumn(\n\t\tCODE_VALUE,\n\t\tCODE_SET,\n\t\tCDF_MEANING,\n\t\tDISPLAY,\n\t\tDISPLAY_KEY,\n\t\tDESCRIPTION,\n\t\tDEFINITION\n\t)) ~> SelectEventClass\nverifiedPrsnl select(mapColumn(\n\t\tVERIFIED_PERSON_ID = PERSON_ID,\n\t\tVERIFIED_PERSONNEL = NAME_FULL_FORMATTED\n\t)) ~> SelectVerifiedPrsnl\nupdatePrsnl select(mapColumn(\n\t\tUPDATE_PERSON_ID = PERSON_ID,\n\t\tUPDATE_PERSONNEL = NAME_FULL_FORMATTED\n\t)) ~> SelectUpdatePrsnl\nperformingPrsnl select(mapColumn(\n\t\tPERFORMING_PERSON_ID = PERSON_ID,\n\t\tPERFORMING_PERSONNEL = NAME_FULL_FORMATTED\n\t)) ~> SelectPerformingPrsnl\ncePrsnlPerformingPersonnel, SelectVerifiedPrsnl join(VERIFIED_PRSNL_ID == VERIFIED_PERSON_ID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> cePrsnlVerifiedPersonnel\nresultUnit filter(CODE_SET == 54 && ACTIVE_IND) ~> resultUnitFilter\nresultUnitFilter select(mapColumn(\n\t\tRESULT_UNIT_CODE_VALUE = CODE_VALUE,\n\t\tRESULT_UNIT_DISPLAY = DISPLAY\n\t)) ~> SelectResultUnit\nceEventClassDesc, SelectResultUnit join(RESULT_UNITS_CD == RESULT_UNIT_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceResultUnit\nresultTimeUnit filter(CODE_SET == 54 && ACTIVE_IND) ~> resultTimeUnitFilter\nresultTimeUnitFilter select(mapColumn(\n\t\tRESULT_TIME_UNIT_CODE_VALUE = CODE_VALUE,\n\t\tRESULT_TIME_UNIT_DISPLAY = DISPLAY\n\t)) ~> SelectResultTimeUnit\nceResultUnit, SelectResultTimeUnit join(RESULT_TIME_UNITS_CD == RESULT_TIME_UNIT_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceResultTimeUnit\nresultStatus filter(CODE_SET == 8 && ACTIVE_IND) ~> resultStatusFilter\nresultStatusFilter select(mapColumn(\n\t\tRESULT_STATUS_CODE_VALUE = CODE_VALUE,\n\t\tRESULT_STATUS_DISPLAY = DISPLAY\n\t)) ~> SelectResultStatus\nceResultTimeUnit, SelectResultStatus join(RESULT_STATUS_CD == RESULT_STATUS_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceResultStatus\ncontributorSystem filter(CODE_SET == 89 && ACTIVE_IND) ~> contributorSystemFilter\ncontributorSystemFilter select(mapColumn(\n\t\tCONTRIBUTOR_SYSTEM_CODE_VALUE = CODE_VALUE,\n\t\tCONTRIBUTOR_SYSTEM_DISPLAY = DISPLAY\n\t)) ~> SelectContributorSystem\nceResultStatus, SelectContributorSystem join(CONTRIBUTOR_SYSTEM_CD == CONTRIBUTOR_SYSTEM_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceContributorSystem\nentryMode filter(CODE_SET == 29520 && ACTIVE_IND) ~> entryModeFilter\nentryModeFilter select(mapColumn(\n\t\tEVENT_ENTRY_MODE_CODE_VALUE = CODE_VALUE,\n\t\tEVENT_ENTRY_MODE_DISPLAY = DISPLAY\n\t)) ~> SelectEntryMode\nceContributorSystem, SelectEntryMode join(ENTRY_MODE_CD == EVENT_ENTRY_MODE_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceEntryMode\nresultSource filter(CODE_SET == 30200 && ACTIVE_IND) ~> resultSourceFilter\nresultSourceFilter select(mapColumn(\n\t\tRESULT_SOURCE_CODE_VALUE = CODE_VALUE,\n\t\tRESULT_SOURCE_DISPLAY = DISPLAY\n\t)) ~> SelectResultSource\nceEntryMode, SelectResultSource join(SOURCE_CD == RESULT_SOURCE_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceResultSource\nnormalcy filter(CODE_SET == 52 && ACTIVE_IND) ~> normalcyFilter\nnormalcyFilter select(mapColumn(\n\t\tNORMALCY_CODE_VALUE = CODE_VALUE,\n\t\tNORMALCY_DISPLAY = DISPLAY\n\t)) ~> SelectNormalcy\nceResultSource, SelectNormalcy join(NORMALCY_CD == NORMALCY_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceNormalcy\nnormalcyMethod filter(CODE_SET == 50 && ACTIVE_IND) ~> normalcyMethodFilter\nnormalcyMethodFilter select(mapColumn(\n\t\tNORMALCY_METHOD_CODE_VALUE = CODE_VALUE,\n\t\tNORMALCY_METHOD_DISPLAY = DISPLAY\n\t)) ~> SelectNormalcyMethod\nceNormalcy, SelectNormalcyMethod join(NORMALCY_METHOD_CD == NORMALCY_METHOD_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceNormalcyMethod\neventRelationship filter(CODE_SET == 24 && ACTIVE_IND) ~> eventRelationshipFilter\neventRelationshipFilter select(mapColumn(\n\t\tEVENT_RELATIONSHIP_CODE_VALUE = CODE_VALUE,\n\t\tEVENT_RELATIONSHIP_DISPLAY = DISPLAY\n\t)) ~> SelectEventRelationship\nceNormalcyMethod, SelectEventRelationship join(EVENT_RELTN_CD == EVENT_RELATIONSHIP_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceEventRelationship\nrecordStatus filter(CODE_SET == 48 && ACTIVE_IND) ~> recordStatusFilter\nrecordStatusFilter select(mapColumn(\n\t\tRECORD_STATUS_CODE_VALUE = CODE_VALUE,\n\t\tRECORD_STATUS_DISPLAY = DISPLAY\n\t)) ~> SelectRecordStatus\nceEventRelationship, SelectRecordStatus join(RECORD_STATUS_CD == RECORD_STATUS_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceRecordStatus\nresourceGroup filter(CODE_SET == 221 && ACTIVE_IND) ~> resourceGroupFilter\nresourceGroupFilter select(mapColumn(\n\t\tRESOURCE_GROUP_CODE_VALUE = CODE_VALUE,\n\t\tRESOURCE_GROUP_DISPLAY = DISPLAY\n\t)) ~> SelectResourceGroup\nceRecordStatus, SelectResourceGroup join(RESOURCE_GROUP_CD == RESOURCE_GROUP_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceResourceGroup\nresource filter(CODE_SET == 221 && ACTIVE_IND) ~> resourceFilter\nresourceFilter select(mapColumn(\n\t\tRESOURCE_CODE_VALUE = CODE_VALUE,\n\t\tRESOURCE_DISPLAY = DISPLAY\n\t)) ~> SelectResource\nceResourceGroup, SelectResource join(RESOURCE_CD == RESOURCE_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceResource\nMainSelect sink(input(\n\t\tCODE_SET as integer,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tTABLE_NAME as string,\n\t\tCONTRIBUTOR as string,\n\t\tOWNER_MODULE as string,\n\t\tCACHE_IND as boolean,\n\t\tEXTENSION_IND as integer,\n\t\tADD_ACCESS_IND as boolean,\n\t\tCHG_ACCESS_IND as boolean,\n\t\tDEL_ACCESS_IND as boolean,\n\t\tINQ_ACCESS_IND as boolean,\n\t\tDOMAIN_QUALIFIER_IND as boolean,\n\t\tDOMAIN_CODE_SET as integer,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tCODE_SET_HITS as integer,\n\t\tCODE_VALUES_CNT as integer,\n\t\tDEF_DUP_RULE_FLAG as integer,\n\t\tCDF_MEANING_DUP_IND as boolean,\n\t\tDISPLAY_KEY_DUP_IND as boolean,\n\t\tACTIVE_IND_DUP_IND as boolean,\n\t\tDISPLAY_DUP_IND as boolean,\n\t\tALIAS_DUP_IND as boolean,\n\t\tDEFINITION_DUP_IND as boolean,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> VitalsSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/VitalsSinkParquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestVitalsQueryDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Query to combine tables into the Vitals dataset\n",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "StagedClinicalEvent",
								"type": "DatasetReference"
							},
							"name": "clinicalevent",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedPrsnl",
								"type": "DatasetReference"
							},
							"name": "updatePrsnl",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedPrsnl",
								"type": "DatasetReference"
							},
							"name": "verifiedPrsnl",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedPrsnl",
								"type": "DatasetReference"
							},
							"name": "performingPrsnl",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "eventClass",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "eventClassDesc",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "resultUnit",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "resultTimeUnit",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "resultStatus",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "contributorSystem",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "entryMode",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "resultSource",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "normalcy",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "normalcyMethod",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "eventRelationship",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "recordStatus",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "resourceGroup",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "StagedCodeValue",
								"type": "DatasetReference"
							},
							"name": "resource",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TestVitalsSink",
								"type": "DatasetReference"
							},
							"name": "VitalsSink"
						}
					],
					"transformations": [
						{
							"name": "cePrsnlUpdatePersonnel"
						},
						{
							"name": "cePrsnlPerformingPersonnel"
						},
						{
							"name": "ceEventCode"
						},
						{
							"name": "eventClassFilter"
						},
						{
							"name": "eventClassDescFilter"
						},
						{
							"name": "SelectEventClassDesc"
						},
						{
							"name": "ceEventClassDesc"
						},
						{
							"name": "MainSelect"
						},
						{
							"name": "SelectEventClass"
						},
						{
							"name": "SelectVerifiedPrsnl"
						},
						{
							"name": "SelectUpdatePrsnl"
						},
						{
							"name": "SelectPerformingPrsnl"
						},
						{
							"name": "cePrsnlVerifiedPersonnel"
						},
						{
							"name": "resultUnitFilter"
						},
						{
							"name": "SelectResultUnit"
						},
						{
							"name": "ceResultUnit"
						},
						{
							"name": "resultTimeUnitFilter"
						},
						{
							"name": "SelectResultTimeUnit"
						},
						{
							"name": "ceResultTimeUnit"
						},
						{
							"name": "resultStatusFilter"
						},
						{
							"name": "SelectResultStatus"
						},
						{
							"name": "ceResultStatus"
						},
						{
							"name": "contributorSystemFilter"
						},
						{
							"name": "SelectContributorSystem"
						},
						{
							"name": "ceContributorSystem"
						},
						{
							"name": "entryModeFilter"
						},
						{
							"name": "SelectEntryMode"
						},
						{
							"name": "ceEntryMode"
						},
						{
							"name": "resultSourceFilter"
						},
						{
							"name": "SelectResultSource"
						},
						{
							"name": "ceResultSource"
						},
						{
							"name": "normalcyFilter"
						},
						{
							"name": "SelectNormalcy"
						},
						{
							"name": "ceNormalcy"
						},
						{
							"name": "normalcyMethodFilter"
						},
						{
							"name": "SelectNormalcyMethod"
						},
						{
							"name": "ceNormalcyMethod"
						},
						{
							"name": "eventRelationshipFilter"
						},
						{
							"name": "SelectEventRelationship"
						},
						{
							"name": "ceEventRelationship"
						},
						{
							"name": "recordStatusFilter"
						},
						{
							"name": "SelectRecordStatus"
						},
						{
							"name": "ceRecordStatus"
						},
						{
							"name": "resourceGroupFilter"
						},
						{
							"name": "SelectResourceGroup"
						},
						{
							"name": "ceResourceGroup"
						},
						{
							"name": "resourceFilter"
						},
						{
							"name": "SelectResource"
						},
						{
							"name": "ceResource"
						}
					],
					"script": "\n\nsource(output(\n\t\tCLINICAL_EVENT_ID as double,\n\t\tENCNTR_ID as double,\n\t\tPERSON_ID as double,\n\t\tUTC_TMP2_4 as timestamp,\n\t\tENCNTR_FINANCIAL_ID as double,\n\t\tEVENT_ID as double,\n\t\tUTC_TMP2_7 as timestamp,\n\t\tEVENT_TITLE_TEXT as string,\n\t\tVIEW_LEVEL as double,\n\t\tORDER_ID as double,\n\t\tCATALOG_CD as double,\n\t\tSERIES_REF_NBR as string,\n\t\tACCESSION_NBR as string,\n\t\tCONTRIBUTOR_SYSTEM_CD as double,\n\t\tREFERENCE_NBR as string,\n\t\tPARENT_EVENT_ID as double,\n\t\tEVENT_RELTN_CD as double,\n\t\tUTC_TMP2_18 as timestamp,\n\t\tEVENT_CLASS_CD as double,\n\t\tEVENT_CD as double,\n\t\tEVENT_TAG as string,\n\t\tUTC_TMP2_22 as timestamp,\n\t\tEVENT_END_DT_TM_OS as double,\n\t\tRESULT_VAL as string,\n\t\tRESULT_UNITS_CD as double,\n\t\tRESULT_TIME_UNITS_CD as double,\n\t\tTASK_ASSAY_CD as double,\n\t\tRECORD_STATUS_CD as double,\n\t\tRESULT_STATUS_CD as double,\n\t\tAUTHENTIC_FLAG as double,\n\t\tPUBLISH_FLAG as double,\n\t\tQC_REVIEW_CD as double,\n\t\tNORMALCY_CD as double,\n\t\tNORMALCY_METHOD_CD as double,\n\t\tINQUIRE_SECURITY_CD as double,\n\t\tRESOURCE_GROUP_CD as double,\n\t\tRESOURCE_CD as double,\n\t\tSUBTABLE_BIT_MAP as double,\n\t\tCOLLATING_SEQ as string,\n\t\tUTC_TMP2_40 as timestamp,\n\t\tVERIFIED_PRSNL_ID as double,\n\t\tUTC_TMP2_42 as timestamp,\n\t\tPERFORMED_PRSNL_ID as double,\n\t\tUTC_TMP2_44 as timestamp,\n\t\tUPDT_ID as double,\n\t\tUPDT_TASK as double,\n\t\tUPDT_CNT as double,\n\t\tUPDT_APPLCTX as double,\n\t\tNORMAL_LOW as string,\n\t\tNORMAL_HIGH as string,\n\t\tCRITICAL_LOW as string,\n\t\tCRITICAL_HIGH as string,\n\t\tUTC_TMP2_53 as timestamp,\n\t\tEVENT_TAG_SET_FLAG as double,\n\t\tNOTE_IMPORTANCE_BIT_MAP as double,\n\t\tUTC_TMP2_56 as timestamp,\n\t\tORDER_ACTION_SEQUENCE as double,\n\t\tENTRY_MODE_CD as double,\n\t\tSOURCE_CD as double,\n\t\tCLINICAL_SEQ as string,\n\t\tEVENT_END_TZ as double,\n\t\tEVENT_START_TZ as double,\n\t\tPERFORMED_TZ as double,\n\t\tVERIFIED_TZ as double,\n\t\tTASK_ASSAY_VERSION_NBR as double,\n\t\tMODIFIER_LONG_TEXT_ID as double,\n\t\tSRC_EVENT_ID as double,\n\t\tUTC_TMP2_68 as timestamp,\n\t\tCE_DYNAMIC_LABEL_ID as double,\n\t\tNOMEN_STRING_FLAG as double,\n\t\tLAST_UTC_TS as timestamp,\n\t\tDEVICE_FREE_TXT as string,\n\t\tTRAIT_BIT_MAP as double,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as double,\n\t\tVALID_UNTIL_DT_TM as timestamp,\n\t\tVERIFIED_DT_TM as timestamp,\n\t\tVALID_FROM_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tSRC_CLINSIG_UPDT_DT_TM as timestamp,\n\t\tPERFORMED_DT_TM as timestamp,\n\t\tEXPIRATION_DT_TM as timestamp,\n\t\tEVENT_START_DT_TM as timestamp,\n\t\tEVENT_END_DT_TM as timestamp,\n\t\tCLINSIG_UPDT_DT_TM as timestamp,\n\t\tINST_ID as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> clinicalevent\nsource(output(\n\t\tPERSON_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_ID as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tACTIVE_IND as boolean,\n\t\tACTIVE_STATUS_CD as long,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCREATE_PRSNL_ID as integer,\n\t\tNAME_LAST_KEY as string,\n\t\tNAME_FIRST_KEY as string,\n\t\tPRSNL_TYPE_CD as long,\n\t\tNAME_FULL_FORMATTED as string,\n\t\tPASSWORD as string,\n\t\tEMAIL as string,\n\t\tPHYSICIAN_IND as boolean,\n\t\tPOSITION_CD as long,\n\t\tDEPARTMENT_CD as long,\n\t\tFREE_TEXT_IND as boolean,\n\t\tSECTION_CD as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tCONTRIBUTOR_SYSTEM_CD as long,\n\t\tNAME_LAST as string,\n\t\tNAME_FIRST as string,\n\t\tUSERNAME as string,\n\t\tFT_ENTITY_NAME as string,\n\t\tFT_ENTITY_ID as integer,\n\t\tPRIM_ASSIGN_LOC_CD as long,\n\t\tLOG_ACCESS_IND as boolean,\n\t\tLOG_LEVEL as integer,\n\t\tNAME_FIRST_KEY_NLS as string,\n\t\tNAME_LAST_KEY_NLS as string,\n\t\tPHYSICIAN_STATUS_CD as long,\n\t\tLOGICAL_DOMAIN_ID as integer,\n\t\tLOGICAL_DOMAIN_GRP_ID as integer,\n\t\tNAME_FIRST_KEY_A_NLS as string,\n\t\tNAME_LAST_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tEXTERNAL_IND as boolean,\n\t\tTXN_ID_TEXT as string,\n\t\tACTIVE_STATUS_DT_TM as timestamp,\n\t\tBEG_EFFECTIVE_DT_TM as timestamp,\n\t\tCREATE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> updatePrsnl\nsource(output(\n\t\tPERSON_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_ID as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tACTIVE_IND as boolean,\n\t\tACTIVE_STATUS_CD as long,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCREATE_PRSNL_ID as integer,\n\t\tNAME_LAST_KEY as string,\n\t\tNAME_FIRST_KEY as string,\n\t\tPRSNL_TYPE_CD as long,\n\t\tNAME_FULL_FORMATTED as string,\n\t\tPASSWORD as string,\n\t\tEMAIL as string,\n\t\tPHYSICIAN_IND as boolean,\n\t\tPOSITION_CD as long,\n\t\tDEPARTMENT_CD as long,\n\t\tFREE_TEXT_IND as boolean,\n\t\tSECTION_CD as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tCONTRIBUTOR_SYSTEM_CD as long,\n\t\tNAME_LAST as string,\n\t\tNAME_FIRST as string,\n\t\tUSERNAME as string,\n\t\tFT_ENTITY_NAME as string,\n\t\tFT_ENTITY_ID as integer,\n\t\tPRIM_ASSIGN_LOC_CD as long,\n\t\tLOG_ACCESS_IND as boolean,\n\t\tLOG_LEVEL as integer,\n\t\tNAME_FIRST_KEY_NLS as string,\n\t\tNAME_LAST_KEY_NLS as string,\n\t\tPHYSICIAN_STATUS_CD as long,\n\t\tLOGICAL_DOMAIN_ID as integer,\n\t\tLOGICAL_DOMAIN_GRP_ID as integer,\n\t\tNAME_FIRST_KEY_A_NLS as string,\n\t\tNAME_LAST_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tEXTERNAL_IND as boolean,\n\t\tTXN_ID_TEXT as string,\n\t\tACTIVE_STATUS_DT_TM as timestamp,\n\t\tBEG_EFFECTIVE_DT_TM as timestamp,\n\t\tCREATE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> verifiedPrsnl\nsource(output(\n\t\tPERSON_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_ID as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tACTIVE_IND as boolean,\n\t\tACTIVE_STATUS_CD as long,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCREATE_PRSNL_ID as integer,\n\t\tNAME_LAST_KEY as string,\n\t\tNAME_FIRST_KEY as string,\n\t\tPRSNL_TYPE_CD as long,\n\t\tNAME_FULL_FORMATTED as string,\n\t\tPASSWORD as string,\n\t\tEMAIL as string,\n\t\tPHYSICIAN_IND as boolean,\n\t\tPOSITION_CD as long,\n\t\tDEPARTMENT_CD as long,\n\t\tFREE_TEXT_IND as boolean,\n\t\tSECTION_CD as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tCONTRIBUTOR_SYSTEM_CD as long,\n\t\tNAME_LAST as string,\n\t\tNAME_FIRST as string,\n\t\tUSERNAME as string,\n\t\tFT_ENTITY_NAME as string,\n\t\tFT_ENTITY_ID as integer,\n\t\tPRIM_ASSIGN_LOC_CD as long,\n\t\tLOG_ACCESS_IND as boolean,\n\t\tLOG_LEVEL as integer,\n\t\tNAME_FIRST_KEY_NLS as string,\n\t\tNAME_LAST_KEY_NLS as string,\n\t\tPHYSICIAN_STATUS_CD as long,\n\t\tLOGICAL_DOMAIN_ID as integer,\n\t\tLOGICAL_DOMAIN_GRP_ID as integer,\n\t\tNAME_FIRST_KEY_A_NLS as string,\n\t\tNAME_LAST_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tEXTERNAL_IND as boolean,\n\t\tTXN_ID_TEXT as string,\n\t\tACTIVE_STATUS_DT_TM as timestamp,\n\t\tBEG_EFFECTIVE_DT_TM as timestamp,\n\t\tCREATE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> performingPrsnl\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> eventClass\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> eventClassDesc\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> resultUnit\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> resultTimeUnit\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> resultStatus\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> contributorSystem\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> entryMode\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> resultSource\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> normalcy\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> normalcyMethod\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> eventRelationship\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> recordStatus\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> resourceGroup\nsource(output(\n\t\tCODE_VALUE as long,\n\t\tCODE_SET as integer,\n\t\tCDF_MEANING as string,\n\t\tDISPLAY as string,\n\t\tDISPLAY_KEY as string,\n\t\tDESCRIPTION as string,\n\t\tDEFINITION as string,\n\t\tCOLLATION_SEQ as integer,\n\t\tACTIVE_TYPE_CD as long,\n\t\tACTIVE_IND as boolean,\n\t\tUPDT_ID as integer,\n\t\tUPDT_CNT as integer,\n\t\tUPDT_TASK as integer,\n\t\tUPDT_APPLCTX as long,\n\t\tDATA_STATUS_CD as long,\n\t\tDATA_STATUS_PRSNL_ID as integer,\n\t\tACTIVE_STATUS_PRSNL_ID as integer,\n\t\tCKI as string,\n\t\tDISPLAY_KEY_NLS as string,\n\t\tCONCEPT_CKI as string,\n\t\tDISPLAY_KEY_A_NLS as string,\n\t\tLAST_UTC_TS as timestamp,\n\t\tTXN_ID_TEXT as string,\n\t\tCLU_SUBKEY1_FLAG as boolean,\n\t\tACTIVE_DT_TM as timestamp,\n\t\tBEGIN_EFFECTIVE_DT_TM as timestamp,\n\t\tDATA_STATUS_DT_TM as timestamp,\n\t\tUPDT_DT_TM as timestamp,\n\t\tINACTIVE_DT_TM as timestamp,\n\t\tEND_EFFECTIVE_DT_TM as timestamp,\n\t\tINST_ID as integer,\n\t\tDW_Refresh_DT_TM as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true) ~> resource\nclinicalevent, SelectUpdatePrsnl join(UPDT_ID == UPDATE_PERSON_ID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> cePrsnlUpdatePersonnel\ncePrsnlUpdatePersonnel, SelectPerformingPrsnl join(PERFORMED_PRSNL_ID == PERFORMING_PERSON_ID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> cePrsnlPerformingPersonnel\ncePrsnlVerifiedPersonnel, SelectEventClass join(EVENT_CD == CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceEventCode\neventClass filter(CODE_SET == 72 && ACTIVE_IND) ~> eventClassFilter\neventClassDesc filter(CODE_SET == 53 && ACTIVE_IND) ~> eventClassDescFilter\neventClassDescFilter select(mapColumn(\n\t\tCODE_VALUE,\n\t\tDESCRIPTION\n\t)) ~> SelectEventClassDesc\nceEventCode, SelectEventClassDesc join(EVENT_CLASS_CD == SelectEventClassDesc@CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceEventClassDesc\nceResource select(mapColumn(\n\t\tCLINICAL_EVENT_ID,\n\t\tCerner_Encounter_ID = ENCNTR_ID,\n\t\tCerner_Patient_ID = PERSON_ID,\n\t\tCerner_ENCNTR_FINANCIAL_ID = ENCNTR_FINANCIAL_ID,\n\t\tEVENT_ID,\n\t\tEVENT_TITLE_TEXT,\n\t\tVIEW_LEVEL,\n\t\tORDER_ID,\n\t\tCATALOG_CD,\n\t\tACCESSION_NBR,\n\t\tCONTRIBUTOR_SYSTEM_CD,\n\t\tPARENT_EVENT_ID,\n\t\tEVENT_RELTN_CD,\n\t\tEVENT_CLASS_CD,\n\t\tEVENT_CD,\n\t\tEVENT_TAG,\n\t\tEVENT_END_DT_TM_OS,\n\t\tRESULT_VAL,\n\t\tRESULT_UNITS_CD,\n\t\tRESULT_TIME_UNITS_CD,\n\t\tTASK_ASSAY_CD,\n\t\tRECORD_STATUS_CD,\n\t\tRESULT_STATUS_CD,\n\t\tAUTHENTIC_FLAG,\n\t\tPUBLISH_FLAG,\n\t\tQC_REVIEW_CD,\n\t\tNORMALCY_CD,\n\t\tNORMALCY_METHOD_CD,\n\t\tRESOURCE_GROUP_CD,\n\t\tRESOURCE_CD,\n\t\tSUBTABLE_BIT_MAP,\n\t\tCOLLATING_SEQ,\n\t\tVERIFIED_PRSNL_ID,\n\t\tPERFORMED_PRSNL_ID,\n\t\tce_UPDT_ID = UPDT_ID,\n\t\tce_UPDT_TASK = UPDT_TASK,\n\t\tce_UPDT_CNT = UPDT_CNT,\n\t\tce_UPDT_APPLCTX = UPDT_APPLCTX,\n\t\tNORMAL_LOW,\n\t\tNORMAL_HIGH,\n\t\tCRITICAL_LOW,\n\t\tCRITICAL_HIGH,\n\t\tEVENT_TAG_SET_FLAG,\n\t\tNOTE_IMPORTANCE_BIT_MAP,\n\t\tORDER_ACTION_SEQUENCE,\n\t\tENTRY_MODE_CD,\n\t\tSOURCE_CD,\n\t\tCLINICAL_SEQ,\n\t\tEVENT_END_TZ,\n\t\tEVENT_START_TZ,\n\t\tPERFORMED_TZ,\n\t\tVERIFIED_TZ,\n\t\tTASK_ASSAY_VERSION_NBR,\n\t\tMODIFIER_LONG_TEXT_ID,\n\t\tSRC_EVENT_ID,\n\t\tCE_DYNAMIC_LABEL_ID,\n\t\tNOMEN_STRING_FLAG,\n\t\tce_LAST_UTC_TS = LAST_UTC_TS,\n\t\tDEVICE_FREE_TXT,\n\t\tTRAIT_BIT_MAP,\n\t\tVALID_UNTIL_DT_TM,\n\t\tVERIFIED_DT_TM,\n\t\tVALID_FROM_DT_TM,\n\t\tce_UPDT_DT_TM = UPDT_DT_TM,\n\t\tSRC_CLINSIG_UPDT_DT_TM,\n\t\tPERFORMED_DT_TM,\n\t\tEXPIRATION_DT_TM,\n\t\tEVENT_START_DT_TM,\n\t\tEVENT_END_DT_TM,\n\t\tCLINSIG_UPDT_DT_TM,\n\t\tUPDATE_PERSONNEL,\n\t\tVERIFIED_PERSONNEL,\n\t\tPERFORMING_PERSONNEL,\n\t\tDISPLAY_EVENT = DISPLAY,\n\t\tCODE_VALUE = SelectEventClassDesc@CODE_VALUE,\n\t\tDESCRIPTION = SelectEventClassDesc@DESCRIPTION,\n\t\tRESULT_UNIT_DISPLAY,\n\t\tRESULT_TIME_UNIT_DISPLAY,\n\t\tRESULT_STATUS_DISPLAY,\n\t\tCONTRIBUTOR_SYSTEM_DISPLAY,\n\t\tENTRY_MODE_DISPLAY = EVENT_ENTRY_MODE_DISPLAY,\n\t\tRESULT_SOURCE_DISPLAY,\n\t\tNORMALCY_DISPLAY,\n\t\tNORMALCY_METHOD_DISPLAY,\n\t\tEVENT_RELATIONSHIP_DISPLAY,\n\t\tRECORD_STATUS_DISPLAY,\n\t\tRESOURCE_GROUP_DISPLAY,\n\t\tRESOURCE_DISPLAY\n\t)) ~> MainSelect\neventClassFilter select(mapColumn(\n\t\tCODE_VALUE,\n\t\tCODE_SET,\n\t\tCDF_MEANING,\n\t\tDISPLAY,\n\t\tDISPLAY_KEY,\n\t\tDESCRIPTION,\n\t\tDEFINITION\n\t)) ~> SelectEventClass\nverifiedPrsnl select(mapColumn(\n\t\tVERIFIED_PERSON_ID = PERSON_ID,\n\t\tVERIFIED_PERSONNEL = NAME_FULL_FORMATTED\n\t)) ~> SelectVerifiedPrsnl\nupdatePrsnl select(mapColumn(\n\t\tUPDATE_PERSON_ID = PERSON_ID,\n\t\tUPDATE_PERSONNEL = NAME_FULL_FORMATTED\n\t)) ~> SelectUpdatePrsnl\nperformingPrsnl select(mapColumn(\n\t\tPERFORMING_PERSON_ID = PERSON_ID,\n\t\tPERFORMING_PERSONNEL = NAME_FULL_FORMATTED\n\t)) ~> SelectPerformingPrsnl\ncePrsnlPerformingPersonnel, SelectVerifiedPrsnl join(VERIFIED_PRSNL_ID == VERIFIED_PERSON_ID,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> cePrsnlVerifiedPersonnel\nresultUnit filter(CODE_SET == 54 && ACTIVE_IND) ~> resultUnitFilter\nresultUnitFilter select(mapColumn(\n\t\tRESULT_UNIT_CODE_VALUE = CODE_VALUE,\n\t\tRESULT_UNIT_DISPLAY = DISPLAY\n\t)) ~> SelectResultUnit\nceEventClassDesc, SelectResultUnit join(RESULT_UNITS_CD == RESULT_UNIT_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceResultUnit\nresultTimeUnit filter(CODE_SET == 54 && ACTIVE_IND) ~> resultTimeUnitFilter\nresultTimeUnitFilter select(mapColumn(\n\t\tRESULT_TIME_UNIT_CODE_VALUE = CODE_VALUE,\n\t\tRESULT_TIME_UNIT_DISPLAY = DISPLAY\n\t)) ~> SelectResultTimeUnit\nceResultUnit, SelectResultTimeUnit join(RESULT_TIME_UNITS_CD == RESULT_TIME_UNIT_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceResultTimeUnit\nresultStatus filter(CODE_SET == 8 && ACTIVE_IND) ~> resultStatusFilter\nresultStatusFilter select(mapColumn(\n\t\tRESULT_STATUS_CODE_VALUE = CODE_VALUE,\n\t\tRESULT_STATUS_DISPLAY = DISPLAY\n\t)) ~> SelectResultStatus\nceResultTimeUnit, SelectResultStatus join(RESULT_STATUS_CD == RESULT_STATUS_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceResultStatus\ncontributorSystem filter(CODE_SET == 89 && ACTIVE_IND) ~> contributorSystemFilter\ncontributorSystemFilter select(mapColumn(\n\t\tCONTRIBUTOR_SYSTEM_CODE_VALUE = CODE_VALUE,\n\t\tCONTRIBUTOR_SYSTEM_DISPLAY = DISPLAY\n\t)) ~> SelectContributorSystem\nceResultStatus, SelectContributorSystem join(CONTRIBUTOR_SYSTEM_CD == CONTRIBUTOR_SYSTEM_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceContributorSystem\nentryMode filter(CODE_SET == 29520 && ACTIVE_IND) ~> entryModeFilter\nentryModeFilter select(mapColumn(\n\t\tEVENT_ENTRY_MODE_CODE_VALUE = CODE_VALUE,\n\t\tEVENT_ENTRY_MODE_DISPLAY = DISPLAY\n\t)) ~> SelectEntryMode\nceContributorSystem, SelectEntryMode join(ENTRY_MODE_CD == EVENT_ENTRY_MODE_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceEntryMode\nresultSource filter(CODE_SET == 30200 && ACTIVE_IND) ~> resultSourceFilter\nresultSourceFilter select(mapColumn(\n\t\tRESULT_SOURCE_CODE_VALUE = CODE_VALUE,\n\t\tRESULT_SOURCE_DISPLAY = DISPLAY\n\t)) ~> SelectResultSource\nceEntryMode, SelectResultSource join(SOURCE_CD == RESULT_SOURCE_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceResultSource\nnormalcy filter(CODE_SET == 52 && ACTIVE_IND) ~> normalcyFilter\nnormalcyFilter select(mapColumn(\n\t\tNORMALCY_CODE_VALUE = CODE_VALUE,\n\t\tNORMALCY_DISPLAY = DISPLAY\n\t)) ~> SelectNormalcy\nceResultSource, SelectNormalcy join(NORMALCY_CD == NORMALCY_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceNormalcy\nnormalcyMethod filter(CODE_SET == 50 && ACTIVE_IND) ~> normalcyMethodFilter\nnormalcyMethodFilter select(mapColumn(\n\t\tNORMALCY_METHOD_CODE_VALUE = CODE_VALUE,\n\t\tNORMALCY_METHOD_DISPLAY = DISPLAY\n\t)) ~> SelectNormalcyMethod\nceNormalcy, SelectNormalcyMethod join(NORMALCY_METHOD_CD == NORMALCY_METHOD_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceNormalcyMethod\neventRelationship filter(CODE_SET == 24 && ACTIVE_IND) ~> eventRelationshipFilter\neventRelationshipFilter select(mapColumn(\n\t\tEVENT_RELATIONSHIP_CODE_VALUE = CODE_VALUE,\n\t\tEVENT_RELATIONSHIP_DISPLAY = DISPLAY\n\t)) ~> SelectEventRelationship\nceNormalcyMethod, SelectEventRelationship join(EVENT_RELTN_CD == EVENT_RELATIONSHIP_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceEventRelationship\nrecordStatus filter(CODE_SET == 48 && ACTIVE_IND) ~> recordStatusFilter\nrecordStatusFilter select(mapColumn(\n\t\tRECORD_STATUS_CODE_VALUE = CODE_VALUE,\n\t\tRECORD_STATUS_DISPLAY = DISPLAY\n\t)) ~> SelectRecordStatus\nceEventRelationship, SelectRecordStatus join(RECORD_STATUS_CD == RECORD_STATUS_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceRecordStatus\nresourceGroup filter(CODE_SET == 221 && ACTIVE_IND) ~> resourceGroupFilter\nresourceGroupFilter select(mapColumn(\n\t\tRESOURCE_GROUP_CODE_VALUE = CODE_VALUE,\n\t\tRESOURCE_GROUP_DISPLAY = DISPLAY\n\t)) ~> SelectResourceGroup\nceRecordStatus, SelectResourceGroup join(RESOURCE_GROUP_CD == RESOURCE_GROUP_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceResourceGroup\nresource filter(CODE_SET == 221 && ACTIVE_IND) ~> resourceFilter\nresourceFilter select(mapColumn(\n\t\tRESOURCE_CODE_VALUE = CODE_VALUE,\n\t\tRESOURCE_DISPLAY = DISPLAY\n\t)) ~> SelectResource\nceResourceGroup, SelectResource join(RESOURCE_CD == RESOURCE_CODE_VALUE,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> ceResource\nMainSelect sink(input(\n\t\tCLINICAL_EVENT_ID as double,\n\t\tCerner_Encounter_ID as double,\n\t\tCerner_Patient_ID as double,\n\t\tCerner_ENCNTR_FINANCIAL_ID as double,\n\t\tEVENT_ID as double,\n\t\tEVENT_TITLE_TEXT as string,\n\t\tVIEW_LEVEL as double,\n\t\tORDER_ID as double,\n\t\tCATALOG_CD as double,\n\t\tACCESSION_NBR as string,\n\t\tCONTRIBUTOR_SYSTEM_CD as double,\n\t\tPARENT_EVENT_ID as double,\n\t\tEVENT_RELTN_CD as double,\n\t\tEVENT_CLASS_CD as double,\n\t\tEVENT_CD as double,\n\t\tEVENT_TAG as string,\n\t\tEVENT_END_DT_TM_OS as double,\n\t\tRESULT_VAL as string,\n\t\tRESULT_UNITS_CD as double,\n\t\tRESULT_TIME_UNITS_CD as double,\n\t\tTASK_ASSAY_CD as double,\n\t\tRECORD_STATUS_CD as double,\n\t\tRESULT_STATUS_CD as double,\n\t\tAUTHENTIC_FLAG as double,\n\t\tPUBLISH_FLAG as double,\n\t\tQC_REVIEW_CD as double,\n\t\tNORMALCY_CD as double,\n\t\tNORMALCY_METHOD_CD as double,\n\t\tRESOURCE_GROUP_CD as double,\n\t\tRESOURCE_CD as double,\n\t\tSUBTABLE_BIT_MAP as double,\n\t\tCOLLATING_SEQ as string,\n\t\tVERIFIED_PRSNL_ID as double,\n\t\tPERFORMED_PRSNL_ID as double,\n\t\tce_UPDT_ID as double,\n\t\tce_UPDT_TASK as double,\n\t\tce_UPDT_CNT as double,\n\t\tce_UPDT_APPLCTX as double,\n\t\tNORMAL_LOW as string,\n\t\tNORMAL_HIGH as string,\n\t\tCRITICAL_LOW as string,\n\t\tCRITICAL_HIGH as string,\n\t\tEVENT_TAG_SET_FLAG as double,\n\t\tNOTE_IMPORTANCE_BIT_MAP as double,\n\t\tORDER_ACTION_SEQUENCE as double,\n\t\tENTRY_MODE_CD as double,\n\t\tSOURCE_CD as double,\n\t\tCLINICAL_SEQ as string,\n\t\tEVENT_END_TZ as double,\n\t\tEVENT_START_TZ as double,\n\t\tPERFORMED_TZ as double,\n\t\tVERIFIED_TZ as double,\n\t\tTASK_ASSAY_VERSION_NBR as double,\n\t\tMODIFIER_LONG_TEXT_ID as double,\n\t\tSRC_EVENT_ID as double,\n\t\tCE_DYNAMIC_LABEL_ID as double,\n\t\tNOMEN_STRING_FLAG as double,\n\t\tce_LAST_UTC_TS as timestamp,\n\t\tDEVICE_FREE_TXT as string,\n\t\tTRAIT_BIT_MAP as double,\n\t\tVALID_UNTIL_DT_TM as timestamp,\n\t\tVERIFIED_DT_TM as timestamp,\n\t\tVALID_FROM_DT_TM as timestamp,\n\t\tce_UPDT_DT_TM as timestamp,\n\t\tSRC_CLINSIG_UPDT_DT_TM as timestamp,\n\t\tPERFORMED_DT_TM as timestamp,\n\t\tEXPIRATION_DT_TM as timestamp,\n\t\tEVENT_START_DT_TM as timestamp,\n\t\tEVENT_END_DT_TM as timestamp,\n\t\tCLINSIG_UPDT_DT_TM as timestamp,\n\t\tUPDATE_PERSONNEL as string,\n\t\tVERIFIED_PERSONNEL as string,\n\t\tPERFORMING_PERSONNEL as string,\n\t\tDISPLAY_EVENT as string,\n\t\tCODE_VALUE as long,\n\t\tDESCRIPTION as string,\n\t\tRESULT_UNIT_DISPLAY as string,\n\t\tRESULT_TIME_UNIT_DISPLAY as string,\n\t\tRESULT_STATUS_DISPLAY as string,\n\t\tCONTRIBUTOR_SYSTEM_DISPLAY as string,\n\t\tENTRY_MODE_DISPLAY as string,\n\t\tRESULT_SOURCE_DISPLAY as string,\n\t\tNORMALCY_DISPLAY as string,\n\t\tNORMALCY_METHOD_DISPLAY as string,\n\t\tEVENT_RELATIONSHIP_DISPLAY as string,\n\t\tRECORD_STATUS_DISPLAY as string,\n\t\tRESOURCE_GROUP_DISPLAY as string,\n\t\tRESOURCE_DISPLAY as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> VitalsSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TestVitalsSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestVitalsQueryPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "VitalsQuery",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TestVitalsQueryDF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"clinicalevent": {},
									"updatePrsnl": {},
									"verifiedPrsnl": {},
									"performingPrsnl": {},
									"eventClass": {},
									"eventClassDesc": {},
									"resultUnit": {},
									"resultTimeUnit": {},
									"resultStatus": {},
									"contributorSystem": {},
									"entryMode": {},
									"resultSource": {},
									"normalcy": {},
									"normalcyMethod": {},
									"eventRelationship": {},
									"recordStatus": {},
									"resourceGroup": {},
									"resource": {},
									"VitalsSink": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TestVitalsQueryDF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VitalsQueryPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "VitalsQuery",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ParallelDataCopy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "VitalsQuery",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"clinicalevent": {},
									"updatePrsnl": {},
									"verifiedPrsnl": {},
									"performingPrsnl": {},
									"eventClass": {},
									"eventClassDesc": {},
									"resultUnit": {},
									"resultTimeUnit": {},
									"resultStatus": {},
									"contributorSystem": {},
									"entryMode": {},
									"resultSource": {},
									"normalcy": {},
									"normalcyMethod": {},
									"eventRelationship": {},
									"recordStatus": {},
									"resourceGroup": {},
									"resource": {},
									"VitalsSink": {}
								}
							},
							"staging": {}
						}
					},
					{
						"name": "ListofSourceTables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM dbo.[tablesToStage] WHERE UPPER(sourceDB) = 'ORACLE' and incrementalCopyFlag = 1"
							},
							"dataset": {
								"referenceName": "SourceTableList",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ParallelDataCopy",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ListofSourceTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ListofSourceTables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LogExecutionStart",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[logExecutionStart]",
										"storedProcedureParameters": {
											"pipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineRunStartTime": {
												"value": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"stageTableID": {
												"value": {
													"value": "@item().stageTableID",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "PilotAzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Stage Data",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LogExecutionStart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@{item().srcQuery}",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"maxConcurrentConnections": 16
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "ParallelDataStagingOracle",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "StagingData",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@{replace(item().schemaName, ' ','')}_@{replace(item().tableName, ' ','')}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SuccessSP",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Stage Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[logExecutionEnd]",
										"storedProcedureParameters": {
											"pipelineRunEndTime": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"pipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineRunStatus": {
												"value": "Success",
												"type": "String"
											},
											"stageTableID": {
												"value": {
													"value": "@{item().stageTableID}",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "PilotAzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "FailureSP",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Stage Data",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[logExecutionEnd]",
										"storedProcedureParameters": {
											"pipelineRunEndTime": {
												"value": {
													"value": "@{utcnow()}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"pipelineRunID": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"pipelineRunStatus": {
												"value": "Failure",
												"type": "String"
											},
											"stageTableID": {
												"value": {
													"value": "@{item().stageTableID}",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "PilotAzureSqlDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/VitalsQuery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IncrementalMillenniumLoad')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Daily run of tables from dbo.tablesToStage where incrementalCopyFlag = 1",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "VitalsQueryPipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-09-12T05:00:00.000Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/VitalsQueryPipeline')]"
			]
		}
	]
}